# ===================================
# 生产环境配置文件 (推荐版本)
# 注意：敏感信息应通过环境变量或外部配置管理
# ===================================

server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: /api
    encoding:
      charset: UTF-8
      enabled: true
      force: true
  # 生产环境性能调优
  tomcat:
    threads:
      max: 200           # 最大线程数
      min-spare: 10      # 最小空闲线程数
    max-connections: 10000
    accept-count: 100
    connection-timeout: 20000
  # 启用压缩
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
    min-response-size: 1024
  # SSL配置 (建议启用)
  ssl:
    enabled: ${SSL_ENABLED:false}
    key-store: ${SSL_KEYSTORE_PATH:}
    key-store-password: ${SSL_KEYSTORE_PASSWORD:}
    key-store-type: PKCS12

spring:
  profiles:
    active: prod
  
  # 应用名称
  application:
    name: ai-code-mother
  
  # MySQL数据库配置
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${DB_URL:jdbc:mysql://localhost:3306/ai_code_mother?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&useSSL=true&requireSSL=false&verifyServerCertificate=false}
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD:}
    # HikariCP 连接池优化
    hikari:
      minimum-idle: 5              # 最小空闲连接
      maximum-pool-size: 20        # 最大连接池大小
      idle-timeout: 300000         # 空闲超时时间(5分钟)
      max-lifetime: 1800000        # 连接最大生存时间(30分钟)
      connection-timeout: 20000    # 连接超时时间(20秒)
      validation-timeout: 3000     # 验证连接超时时间
      leak-detection-threshold: 60000  # 连接泄漏检测阈值
      connection-test-query: SELECT 1
      pool-name: HikariPool-Production

  # Redis配置
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      database: ${REDIS_DATABASE:0}
      password: ${REDIS_PASSWORD:}
      timeout: 3000ms
      ssl:
        enabled: ${REDIS_SSL_ENABLED:false}
      # 连接池配置
      jedis:
        pool:
          max-active: 20
          max-idle: 10
          min-idle: 2
          max-wait: 2000ms
      # 缓存TTL
      ttl: 3600
      
  # Session配置
  session:
    store-type: redis
    redis:
      namespace: spring:session
    timeout: 30d  # 30天过期

  # 文件上传配置
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 100MB
      enabled: true

  # 缓存配置
  cache:
    type: caffeine
    caffeine:
      spec: maximumSize=1000,expireAfterWrite=1h

# ===================================
# AI模型配置 (敏感信息通过环境变量)
# ===================================
langchain4j:
  open-ai:
    chat-model:
      base-url: https://api.deepseek.com
      api-key: ${DEEPSEEK_API_KEY:}
      model-name: ${DEEPSEEK_MODEL:deepseek-chat}
      max-tokens: 8192
      temperature: 0.1
      log-requests: false
      log-responses: false
      timeout: 60s
    streaming-chat-model:
      base-url: https://api.deepseek.com
      api-key: ${DEEPSEEK_API_KEY:}
      model-name: ${DEEPSEEK_MODEL:deepseek-chat}
      max-tokens: 8192
      temperature: 0.1
      log-requests: false
      log-responses: false
    # 推理模型配置
    reasoning-streaming-chat-model:
      base-url: https://api.deepseek.com
      api-key: ${DEEPSEEK_API_KEY:}
      model-name: ${DEEPSEEK_REASONING_MODEL:deepseek-reasoner}
      max-tokens: 32768
      temperature: 0.1
      log-requests: false
      log-responses: false
    # 路由模型配置
    routing-chat-model:
      base-url: https://dashscope.aliyuncs.com/compatible-mode/v1
      api-key: ${DASHSCOPE_API_KEY:}
      model-name: ${DASHSCOPE_MODEL:qwen-turbo}
      max-tokens: 100
      log-requests: false
      log-responses: false

# ===================================
# 云服务配置
# ===================================
# 腾讯云COS配置
cos:
  client:
    host: ${COS_HOST:}
    secretId: ${COS_SECRET_ID:}
    secretKey: ${COS_SECRET_KEY:}
    region: ${COS_REGION:ap-guangzhou}
    bucket: ${COS_BUCKET:}

# 阿里云DashScope配置
dashscope:
  api-key: ${DASHSCOPE_API_KEY:}
  image-model: ${DASHSCOPE_IMAGE_MODEL:wanx-v1}

# 第三方API配置
pexels:
  api-key: ${PEXELS_API_KEY:}

pixabay:
  api-key: ${PIXABAY_API_KEY:}

# ===================================
# 数据库和缓存优化
# ===================================
mybatis-flex:
  configuration:
    # 生产环境关闭SQL日志
    log-impl: ''
    # 开启二级缓存
    cache-enabled: true
    # 懒加载配置
    lazy-loading-enabled: true
    aggressive-lazy-loading: false
  # 全局配置
  global-config:
    # 逻辑删除
    logic-delete-field: isDelete
    logic-delete-value: 1
    logic-not-delete-value: 0

# ===================================
# 监控和管理端点配置
# ===================================
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      show-components: always
      # 健康检查探针
      probes:
        enabled: true
    metrics:
      enabled: true
    prometheus:
      enabled: true
  # 安全配置
  security:
    enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
      environment: prod
    export:
      prometheus:
        enabled: true
        step: 30s

# ===================================
# API文档配置
# ===================================
knife4j:
  enable: ${API_DOC_ENABLED:false}  # 生产环境建议关闭
  basic:
    enable: true
    username: ${API_DOC_USERNAME:admin}
    password: ${API_DOC_PASSWORD:}
  setting:
    language: zh-CN

# ===================================
# 业务配置
# ===================================
code:
  deploy-host: ${DEPLOY_HOST:http://localhost}
  
# 临时文件清理配置
file:
  temp-dir: ${TEMP_DIR:./tmp}
  cleanup:
    enabled: true
    max-age: 24h  # 24小时后清理临时文件

# ===================================
# 日志配置
# ===================================
logging:
  level:
    root: INFO
    com.spring.aicodemother: INFO
    org.springframework.web: WARN
    org.springframework.security: WARN
    # SQL日志在生产环境关闭
    com.mybatisflex: WARN
    # Redis日志
    org.springframework.data.redis: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%logger{50}] - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%logger{50}] - %msg%n"
  file:
    name: ${LOG_FILE:./logs/ai-code-mother.log}
  logback:
    rollingpolicy:
      max-file-size: 100MB
      max-history: 30
      total-size-cap: 3GB

# ===================================
# 安全配置
# ===================================
security:
  # 密码加密盐值 (建议通过环境变量设置)
  password-salt: ${PASSWORD_SALT:Join2049}
  # JWT配置 (如果使用)
  jwt:
    secret: ${JWT_SECRET:}
    expiration: 86400  # 24小时

# ===================================
# 性能监控配置
# ===================================
# 如果使用APM工具，添加相应配置
# skywalking:
#   agent:
#     service-name: ai-code-mother-prod
#     collector:
#       backend-service: ${SKYWALKING_COLLECTOR:}

# ===================================
# 环境变量配置说明
# ===================================
# 需要设置的环境变量：
# DB_URL: 数据库连接URL
# DB_USERNAME: 数据库用户名  
# DB_PASSWORD: 数据库密码
# REDIS_HOST: Redis主机地址
# REDIS_PASSWORD: Redis密码
# DEEPSEEK_API_KEY: DeepSeek API密钥
# DASHSCOPE_API_KEY: DashScope API密钥
# COS_SECRET_ID: 腾讯云COS SecretId
# COS_SECRET_KEY: 腾讯云COS SecretKey
# COS_HOST: COS服务地址
# COS_BUCKET: COS存储桶名称
# PEXELS_API_KEY: Pexels API密钥
# PIXABAY_API_KEY: Pixabay API密钥
# SSL_ENABLED: 是否启用SSL
# SSL_KEYSTORE_PATH: SSL证书路径
# SSL_KEYSTORE_PASSWORD: SSL证书密码